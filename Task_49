#Task 49: Traveling Salesman Problem (TSP)
from itertools import permutations

def tsp_brute_force(graph):
    n = len(graph)
    cities = range(1, n)  # Cities excluding the starting city (0)
    min_cost = float('inf')
    best_path = []

    for perm in permutations(cities):  # Generate all possible paths
        path = (0,) + perm + (0,)  # Start and end at city 0
        cost = sum(graph[path[i]][path[i + 1]] for i in range(n))
        
        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost

# Example distance matrix (Graph)
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

# Solve TSP
path, cost = tsp_brute_force(graph)
print("Shortest Route:", path)
print("Total Distance:", cost)

Shortest Route: (0, 1, 3, 2, 0)
Total Distance: 80
