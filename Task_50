#Task 50: Graph Cycle Detection
def has_cycle(graph):
    visited = set()

    def dfs(node, parent):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                if dfs(neighbor, node):  # Recursive DFS call
                    return True
            elif neighbor != parent:  # If visited and not the parent, cycle found
                return True
        return False

    for node in graph:  # Check all components (handles disconnected graphs)
        if node not in visited:
            if dfs(node, -1):  # Start DFS with no parent (-1)
                return True

    return False

# Example Graph as Adjacency List (Contains a cycle)
graph = {
    0: [1, 2],
    1: [0, 2],
    2: [0, 1, 3],
    3: [2]
}

# Check for Cycle
print("Graph contains a cycle:", has_cycle(graph))

Graph contains a cycle: True
